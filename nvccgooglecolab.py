# -*- coding: utf-8 -*-
"""nvccGoogleColab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15yj07ySD64aEtUQN8f545roTGklwjXo2
"""

!nvcc --version

!pip install git+https://github.com/andreinechaev/nvcc4jupyter.git

# Commented out IPython magic to ensure Python compatibility.
# %load_ext nvcc_plugin

# Commented out IPython magic to ensure Python compatibility.
# %%cuda --name testGoogleColab.cu
# 
# #include <stdio.h>
# 
# #define gpuErrchk(ans) { gpuAssert((ans), __FILE__, __LINE__); }
# inline void gpuAssert(cudaError_t code, const char* file, int line, bool abort = true)
# {
#     if (code != cudaSuccess)
#     {
#         fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
#         if (abort) exit(code);
#     }
# }
# 
# __global__ void add(int a, int b, int *c) {
#    *c = a + b; }
# 
# int main() {
# 
#    // --- Host declarations and initializations
#    int a, b, c;
#    a = 2;
#    b = 6;
# 
#    // --- Device allocations
#    int *d_c; gpuErrchk(cudaMalloc(&d_c, sizeof(int)));
# 
#    // --- Kernel execution
#    add<<<1,1>>>(a, b, d_c);
#    gpuErrchk(cudaPeekAtLastError());
#    gpuErrchk(cudaDeviceSynchronize());
# 
#    // --- Moving the results from device to host
#    gpuErrchk(cudaMemcpy(&c, d_c, sizeof(int), cudaMemcpyDeviceToHost));
# 
#    // --- Results printout
#    printf("%d + %d is %d\n", a, b, c);
#    
#    return 0; }

!pip install pycuda

import pycuda.driver as drv
import pycuda.autoinit
drv.init()
print("%d device(s) found." % drv.Device.count())
for i in range(drv.Device.count()):
  dev = drv.Device(i)
  print("Device #%d: %s" % (i, dev.name()))
  print(" Compute Capability: %d.%d" % dev.compute_capability())
  print(" Total Memory: %s GB" % (dev.total_memory() // (1024 * 1024 * 1024)))

!nvcc -arch=sm_75 -o "/content/src/testGoogleColab.o" /content/src/testGoogleColab.cu

!chmod 755 /content/src/testGoogleColab.o
!/content/src/testGoogleColab.o

# Commented out IPython magic to ensure Python compatibility.
# %cd /usr/local/

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %ls

!rm -rf cuda
!ln -s /usr/local/cuda-10.1 /usr/local/cuda

!stat cuda

!wget https://developer.nvidia.com/compute/cuda/9.2/Prod/local_installers/cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64 -O cuda-repo-ubuntu1604–9–2-local_9.2.88–1_amd64.deb
!dpkg -i cuda-repo-ubuntu1604–9–2-local_9.2.88–1_amd64.deb
!apt-key add /var/cuda-repo-9–2-local/7fa2af80.pub
!apt-get update
!apt-get install cuda-9.2