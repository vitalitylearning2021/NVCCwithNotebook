# -*- coding: utf-8 -*-
"""ctypesGPUPyCUDAThrustMinmax_array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S3p9lx1wJ7PGnAULFcGRCz1SYpg32lT6
"""

!pip install pycuda

# Commented out IPython magic to ensure Python compatibility.
# %%writefile Minmax_array.cu
# 
# #include <thrust/pair.h>
# #include <thrust/device_vector.h>
# #include <thrust/extrema.h>
# 
# // Wrapper function to call the Thrust function
# extern "C" void my_cuda_function(float *d_a, float& minel, float& maxel, const int N) {
# 
# 	thrust::pair<thrust::device_ptr<float>, thrust::device_ptr<float>> tuple;
# 	tuple = thrust::minmax_element(thrust::device_pointer_cast(d_a), thrust::device_pointer_cast(d_a) + N);
# 	minel = tuple.first[0];
# 	maxel = tuple.second[0]; }

!nvcc -arch=sm_75 -o Minmax_array.so -shared -Xcompiler -fPIC Minmax_array.cu

import ctypes
import pycuda.gpuarray as gpuarray
import pycuda.driver as cuda
from pycuda.compiler import SourceModule
import pycuda.autoinit

import numpy as np

# Load the CUDA library
cuda_lib = ctypes.CDLL('./Minmax_array.so')  # Update with the correct path

minel = ctypes.c_float(0.)
maxel = ctypes.c_float(0.)

# Define the function prototype
cuda_lib.my_cuda_function.argtypes = [ctypes.POINTER(ctypes.c_float), ctypes.POINTER(ctypes.c_float), ctypes.POINTER(ctypes.c_float), ctypes.c_int]
cuda_lib.my_cuda_function.restype = None

# Prepare data
input_data = np.array([3, 1, 33, -4]).astype(np.float32)
size = len(input_data)

# Use PyCUDA to allocate GPU memory
input_gpu   = gpuarray.to_gpu(input_data)

# Call the CUDA function
test = cuda_lib.my_cuda_function(ctypes.cast(input_gpu.ptr, ctypes.POINTER(ctypes.c_float)), ctypes.byref(minel), ctypes.byref(maxel), size)

print(input_gpu)
print(np.float32(minel))
print(np.float32(maxel))
